						                	HIBERNATE INTERVIEW QS :




Hibernate Framework:

Hibernate is a Java framework that simplifies the development of Java application to interact with the database. It is an open source, lightweight, ORM (Object Relational Mapping) tool. Hibernate implements the specifications of JPA (Java Persistence API) for data persistence.

➳ Hybernet is one of the best ORM framework availabe for java.
_________________________________________________________________________________________________________________________________________________________________________

What is ORM Hibernate ?

➳ Hibernate orm stands for (object relational mapping). 

➳ this tool is mainly used for converting data in rdbms to an object used in object oriented programming constructs.

➳ it greatly helps in simplifying data retrieval, creation and manipulation.
_________________________________________________________________________________________________________________________________________________________________________

What are some of the important interfaces of Hibernate framework?

Hibernate core interfaces are:

➳ Configuration

➳ SessionFactory

➳ Session

➳ Criteria

➳ Query

➳ Transaction
_________________________________________________________________________________________________________________________________________________________________________

what is configuration ?

➳ The purpose of configuration interface is to configure hibernate settings and mappings.

Example :

Configuration configuration = new Configuration();
configuration.configure("hibernate.cfg.xml"); // Load configuration from XML file
SessionFactory sessionFactory = configuration.buildSessionFactory();

➳ The configuration interface serves as the starting point for setting up hibernate in your application 
➳ It plays a vital role in defining how your Java objects are persisted and retrieved from the database.
_________________________________________________________________________________________________________________________________________________________________________

what is transaction ?

➳ In the context of Hibernate and database management, a transaction refers to a sequence of one or more database operations that are executed as a single, atomic unit of work. 
➳ The purpose of a transaction is to ensure that a series of database operations either all succeed (commit) or all fail (rollback) 
_________________________________________________________________________________________________________________________________________________________________________

What is Session and Session Factory in Hibernate ? 

➳ The Session Factory in Hibernate is responsible for creating of session objects. The Hibernate Session provides methods such as Update, Delete, Post, Get all, all the 
   Crud based operations on database to which the session factory is connected.
__________________________________________________________________________________________________________________________________________________________________________

What is Hibernate first level and second level cache?

➳ The main difference between session and session factory is :

➳ the first level caching is only associated with session level and accessable only at the session level.

➳ where as second level caching is associated with session factory and it is available to all the sessions.
__________________________________________________________________________________________________________________________________________________________________________

what is caching in hibernate ?

➳ Caching is a mechanism to enhance the performance of an application.
➳ caching is used to reduce the number of database queries.
__________________________________________________________________________________________________________________________________________________________________________

What is the benefit of using Hibernate?

➳ Some of the important advantages of Hibernate framework over JDBC are: 

➳ Hibernate removes a lot of boiler-plate code that comes with JDBC API, the code looks more cleaner and readable.  

➳ Hibernate supports inheritance, associations and collections. These features are not present with JDBC API.
__________________________________________________________________________________________________________________________________________________________________________

//@ManyToMany(mappedBy = "admins", cascade = CascadeType.ALL)
    @ManyToMany( cascade = CascadeType.ALL,fetch = FetchType.LAZY)
    @JoinTable(name = "property_admin", joinColumns = {
            @JoinColumn(name = "property_id") }, inverseJoinColumns = {
                    @JoinColumn(name = "admin_id") })
    
   //@Column(nullable = true)
    //@JsonIgnore
    @JsonBackReference
    private List<Property> properties;

what is cascade and fetch?

In the code snippet you provided, cascade and fetch are annotations used in the context of JPA (Java Persistence API) to define the behavior of a many-to-many relationship between two entities.

cascade = CascadeType.ALL: The cascade attribute specifies how operations (such as persist, merge, remove, etc.) should be cascaded from one entity to another. In this case, CascadeType.ALL means that all operations performed on the owning entity (the one where this annotation is defined) will be cascaded to the associated entities. So if an operation like persist or remove is performed on the owning entity, the same operation will be applied to the associated entities.

CascadeType.ALL: This option cascades all operations (persist, merge, remove, refresh) from the parent entity to the associated entities. Any change in the parent entity will be propagated to the associated entities.

CascadeType.PERSIST: This option cascades the persist operation from the parent entity to the associated entities. When you save the parent entity, the associated entities will also be saved if they are not already persistent.

CascadeType.MERGE: This option cascades the merge operation from the parent entity to the associated entities. Changes to the parent entity will be merged into the associated entities when you merge the parent entity.

CascadeType.REMOVE: This option cascades the remove operation from the parent entity to the associated entities. When you delete the parent entity, the associated entities will also be deleted.

CascadeType.REFRESH: This option cascades the refresh operation from the parent entity to the associated entities. It refreshes the state of the associated entities with the current state from the database.



fetch = FetchType.LAZY: The fetch attribute determines how the associated entities should be loaded from the database. In this case, FetchType.LAZY indicates that the associated entities should be loaded lazily, meaning they will be fetched from the database only when explicitly accessed. This is useful when you have large collections of associated entities, and you want to avoid fetching them all at once, which could impact performance.

Regarding the other annotations in your code snippet:

@JoinTable: Specifies the details of the join table used to store the many-to-many relationship between the entities.
@JoinColumn: Specifies the column used for joining the owning entity with the associated entity in the join table.
@JsonBackReference (from Jackson library): Indicates that the annotated property should be ignored during JSON serialization to prevent circular references when serializing bidirectional relationships.
__________________________________________________________________________________________________________________________________________________________________________

What is criteria query ?

➳ Criteria Query in hibernate is used for join queries for joining multiple tables, criteria queries are more flexible and provide better support to for writing dynamic   
   queries as compared to HQL. 
➳ useful methods for hibernate criteria join are createAlias(), setFetchMode(), and setProtection().
➳ The Hibernate Criteria Query Language (HCQL) is used to fetch the records based on the specific criteria.
➳ The Criteria interface provides methods to apply criteria such as retreiving all the records of table whose salary is greater than 50000 etc.
__________________________________________________________________________________________________________________________________________________________________________

what is HQL ?

➳ Hibernate Query Language (HQL) is an object-oriented query language, similar to SQL, but instead of operating on tables and columns, HQL works with persistent objects  
   and their properties. 
➳ HQL queries are translated by Hibernate into conventional SQL queries, which in turns perform action on database.
__________________________________________________________________________________________________________________________________________________________________________

what is native query in jpa ?

➳ A native query is a SQL statement that is specific to a particular database like MySQL. 
➳ It varies a little from JPQL (Java Persistence Query Language) which is used by Spring Data JPA by default.
__________________________________________________________________________________________________________________________________________________________________________

what is difference b/w native query & criteria query ?

➳ the main difference between native SQL queries and Criteria queries in Hibernate is that native SQL queries are written as plain SQL strings and offer more flexibility  
   in terms of using database-specific features.
➳ while Criteria queries are constructed using Java API methods and provide type safety and a more object-oriented approach to query construction.
➳ The choice between them depends on your specific requirements and the level of abstraction and type safety you prefer in your code.
__________________________________________________________________________________________________________________________________________________________________________

what are the states of object in hibernate ?

➳ There are mainly four states of the Hibernate Lifecycle :

   Transient State.
   Persistent State.
   Detached State.
   Removed State.

State 1: Transient State :

➳ The transient state is the first state of an entity object. When we instantiate an object of a POJO class using the new operator then the object is in the transient  
   state. This object is not connected with any hibernate session.

State 2: Persistent State :

➳ Once the object is connected with the Hibernate Session then the object moves into the Persistent State. So, there are two ways to convert the Transient State to the 

Persistent State :

Using the hibernated session, save the entity object into the database table.
Using the hibernated session, load the entity object into the database table.

Following are the methods given for the persistent state:

session.persist(e);
session.save(e);
session.saveOrUpdate(e);
session.update(e);
session.merge(e);
session.lock(e);


State 3: Detached State

For converting an object from Persistent State to Detached State, we either have to close the session or we have to clear its cache. As the session is closed here or the cache is cleared, then any changes made to the data will not affect the database table.
Whenever needed, the detached object can be reconnected to a new hibernate session. To reconnect the detached object to a new hibernate session, we will use the following methods as follows:

merge()
update()
load()
refresh()
save()
update()

Following are the methods used for the detached state :

session.detach(e);
session.evict(e);
session.clear();
session.close();

State 4: Removed State 

In the hibernate lifecycle it is the last state. In the removed state, when the entity object is deleted from the database then the entity object is known to be in the removed state. It is done by calling the delete() operation.
__________________________________________________________________________________________________________________________________________________________________________

what is cascade types ?

➳It is an annotation used to specify the cascade operations that should be applied to associated entities when an operation is performed on the owning entity. 


HIBERNATE MAPPINGS

ONE TO ONE MAPPINGS :

in one directional way :

public class customer {
	private int id;

	private string name;

	@onetoone(cascade = cascadetype.all)
	private Item item;
	
	// GETTERS AND SETTERS & constructor
}


public class Item{

	private int Id;
	private string name;
}

-------------------------
for bi-directional way :

public class customer {
	private int id;

	private string name;

	@onetoone(cascade = cascadetype.all)
	private Item item;
	
	// GETTERS AND SETTERS & constructor
}


public class Item{

	private int Id;
	private string name;
	
	@onetoone(cascade = cascadeType.all, mappedby = item)
	private Customer customer;

}

case 3 : what if u wanted to define joining table? 

public class customer {
	private int id;

	private string name;

	@onetoone(cascade = cascadetype.all)
	@Jointable(name = "customer_item",
			join columns = {@Join column(name = "customer_id)},
			inversejoincolumns = {@Joincolumn(name = "item_id)})
	private Item item;
	
	// GETTERS AND SETTERS & constructor
}

public class Item{

	private int Id;
	private string name;

}
__________________________________________________________________________________________________________________________________________________________________________

ONE TO MANY & MANY TO ONE :

case 1: 


public class customer {
	private int id;

	private string name;

	@onetomany(cascade = cascadetype.all)
	private List<Item> items = new ArrayList<>();
	
	// GETTERS AND SETTERS & constructor
}


public class Item{

	private int Id;
	private string name;

}

-> this will create 3 tables , customer & item & customer_items
---------------------

case 2 :


public class customer {
	private int id;

	private string name;

	@onetomany(cascade = cascadetype.all)
	@joincolumn(name = "customer_id")
	private List<Item> items = new ArrayList<>();
	
	// GETTERS AND SETTERS & constructor
}


public class Item{

	private int Id;
	private string name;

}

-> this will create 2 tables only customer & item.  in item u will have customer_id, this is one to many.
-------------------------


case 3 :

if you want to have many to one in bi-directional way also 


public class customer {
	private int id;

	private string name;

	@onetomany(cascade = cascadetype.all, mappedby="customer")
	private List<Item> items = new ArrayList<>();
	
	// GETTERS AND SETTERS & constructor
}


public class Item{

	private int Id;
	private string name;
	
	@Many2one(cascade = cascadetype.all)
	@JoinColumn(name="customer_id")
	private Customer customer;

}

-> u have to set items to customer and also have to set customer to items, this is how bidirectional works.
-> 2 tables will be shown, customer, item, in items u will have fk.
__________________________________________________________________________________________________________________________________________________________________________

MANY 2 MANY :

CASE 1:

public class customer {
	private int id;

	private string name;

	@manytomany(cascade = cascadetype.all)
	private Set<Item> items = new HashSet<>();
	
	// GETTERS AND SETTERS & constructor
}


public class Item{

	private int Id;
	private string name;
}

-> this will create 3 tables customer,item,customer_item
----------------------------

case 2 : BI-Directional


public class customer {
	private int id;

	private string name;

	@manytomany(cascade = cascadetype.all)
	@JoinTable(name = "customer_item,
		joincolumns={ @joincolumn(name = "customer_id")},
		inversejoincolumn = { @joincolumn = "item_id)})
	private Set<Item> items = new HashSet<>();
	
	// GETTERS AND SETTERS & constructor
}


public class Item{

	private int Id;
	private string name;
	
	@many2many(cascade = cascadetype.all, mappedby = "items")
	private Set<Customer> customer = new HashSet<>()
}
__________________________________________________________________________________________________________________________________________________________________________

What is JPA?

➳ Java Persistence API (JPA) is a Java specification that provides certain functionality and standard to ORM tools. The javax.persistence package contains the JPA classes and interfaces.
__________________________________________________________________________________________________________________________________________________________________________

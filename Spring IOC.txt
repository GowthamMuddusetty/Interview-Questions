                                                                           SPRING IOC QUESTIONS : 


What is IOC (Inversion of Control) and how does it relate to the Spring framework?

➳ IOC is a design principle in which the control of object creation and management is transferred to a container or framework. 
   
➳ In the case of Spring, it manages the objects (beans) and their dependencies. Spring IOC allows you to decouple the dependencies between components and makes your code       more flexible and testable.
__________________________________________________________________________________________________________________________________________________________________________

what is spring bean ?

➳ Spring Bean is nothing special, any object in the Spring framework that we initialize through Spring container is called Spring Bean. 
__________________________________________________________________________________________________________________________________________________________________________

what is bean scope in spring ioc ?

➳ Bean Scopes refers to the lifecycle of Bean that means when the object of Bean will be instantiated, how long does that object live, and how many objects will be   
   created for that bean throughout. 

➳ Basically, it controls the instance creation of the bean and it is managed by the spring container.
__________________________________________________________________________________________________________________________________________________________________________

Can you explain the bean lifecycle in Spring IOC?

➳ The bean lifecycle in Spring IOC consists of several phases: instantiation, population of properties, and initialization. 

➳ After the initialization phase, the bean is ready to be used. 

➳ When the application context is shut down, the destruction phase begins, and the bean's resources are released. The lifecycle is managed by the Spring container.

The Spring bean lifecycle consists of the following stages:
Instantiation: The container creates an instance of the bean.
Population of properties: Dependencies and values are injected into the bean.
Initialization: Initialization methods (e.g., @PostConstruct) are called.
Use: The bean is used by the application.
Destruction: Destruction methods (e.g., @PreDestroy) are called when the bean is removed from the container.
__________________________________________________________________________________________________________________________________________________________________________

What is the difference between singleton and prototype scope in Spring IOC?

➳ In Spring, singleton scope (default) means that only one instance of a bean is created and shared throughout the application. 

➳ Prototype scope, on the other hand, creates a new instance of the bean whenever requested. Singleton beans are created once and stored in the container, while   prototype beans are created each time they are requested.
__________________________________________________________________________________________________________________________________________________________________________

Explain the concept of dependency injection in Spring IOC.

➳ Dependency injection is a key aspect of Spring IOC. It is a process in which the dependencies of a class are provided externally rather than the class creating them itself.
__________________________________________________________________________________________________________________________________________________________________________

What are the different types of Dependency Injection supported by Spring?

Spring supports three types of Dependency Injection:

➳ Constructor Injection: Dependencies are injected through a constructor.
➳ Setter Injection: Dependencies are injected using setter methods.
➳ Interface Injection: Dependencies are injected through interfaces implemented by the class.
__________________________________________________________________________________________________________________________________________________________________________

What is Spring Framework?

➳ Spring is a powerful open-source, loosely coupled (It means one object is not totally dependent on another object, It may get replaced), lightweight, java framework    
   meant for reducing the complexity of developing enterprise-level applications.                                                                       

➳ One of the major feauters of Spring framework is dependency injection. It helps makes things simplier by allowing us to develop loosely coupled applications.
__________________________________________________________________________________________________________________________________________________________________________

How does Spring handle bean initialization and destruction in IOC?

➳ Spring provides different lifecycle methods to handle bean initialization and destruction. 

➳ For initialization, you can use the @PostConstruct annotation on a method, or implement the InitializingBean interface and override the afterPropertiesSet() method. 

➳ For destruction, you can use the @PreDestroy annotation on a method, or implement the DisposableBean interface and override the destroy() method.
__________________________________________________________________________________________________________________________________________________________________________

What is Bean ?

➳ In spring, the objects that form the backbone of your application & are managed by spring ioc container are called as beans.
__________________________________________________________________________________________________________________________________________________________________________

what is container ?

➳ The spring container is responsible for managing the life cycle of beans.
➳ It creates the objects, configures and assembles their dependencies, manages their entire life cycle. 

types of ioc containers :

Bean Factory : Bean factory will create a bean object when getBean() is called thus making it lazy intialisation. through bean factory we can configure only xml based configurations.

Application context : ApplicationContext is the sub-interface of BeanFactory.
➳ BeanFactory provides basic functionalities and is recommended to use for lightweight applications like mobile and applets.
➳ ApplicationContext is an advanced container that extends BeanFactory with features like internationalization, event propagation, and more.
➳ There are different types of Application containers provided by Spring for different requirements as listed below 

1. AnnotationConfigApplicationContext container 
2. AnnotationConfigWebApplicationContext
3. XmlWebApplicationContext
__________________________________________________________________________________________________________________________________________________________________________
  
what is maven ?

➳ Maven is a build automation tool used primarily for Java projects. Maven can also be used to build and manage projects written in C#, Ruby, Scala, and other languages.
➳ Maven is chiefly used for Java-based projects, helping to download dependencies, which refers to the libraries or JAR files. 
__________________________________________________________________________________________________________________________________________________________________________

what does @component do in spring ?

➳ @Component is an annotation that allows Spring to detect our custom beans automatically.
➳ In other words, without having to write any explicit code, Spring will: Scan our application for classes annotated with @Component. Instantiate them and inject any 
   specified dependencies into them.
__________________________________________________________________________________________________________________________________________________________________________

what does @Required annotation do ?

1. The @Required annotation is used to indicate that a particular bean property must be set during configuration. It is used on a setter method or a property declaration within a bean class.

2. If a bean is configured with a property marked as @Required, Spring will throw an exception during context initialization if the property is not set. This helps ensure that mandatory dependencies are injected.

Example :

public class MyBean {
    private MyDependency dependency;

    @Required
    public void setDependency(MyDependency dependency) {
        this.dependency = dependency;
    }
}
__________________________________________________________________________________________________________________________________________________________________________

what does @Qualifier annotation do ?

1. The @Qualifier annotation is used in conjunction with @Autowired to specify which bean should be injected when there are multiple beans of the same type.

2. When you have multiple beans of the same type and you want to disambiguate them, you can use @Qualifier with the name of the target bean.

Example :

public class MyService {
    private final MyRepository repository;

    @Autowired
    @Qualifier("myRepositoryImpl")
    public MyService(MyRepository repository) {
        this.repository = repository;
    }
}
__________________________________________________________________________________________________________________________________________________________________________

what does @Primary annotation do ?

1. The @Primary annotation is used to indicate that a particular bean should be considered the primary candidate when multiple beans of the same type are available for injection.

2. If you have multiple beans of the same type and one of them is marked with @Primary, Spring will inject the primary bean by default when @Autowired is used.

Example :

@Service
@Primary
public class MyPrimaryService implements MyService {
    // ...
}
__________________________________________________________________________________________________________________________________________________________________________

what does @value annotation do ?

1. The @Value annotation is used to inject values from properties files, environment properties, or expressions into a bean's property or constructor parameter.
2. You can use @Value to inject properties or literals into Spring-managed beans, such as specifying database connection details, URLs, or other configuration values.

@Service
public class MyService {
    @Value("${my.property}")
    private String myProperty;

    // ...
}
 
__________________________________________________________________________________________________________________________________________________________________________